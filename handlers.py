from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command, state
# from keyboards import *
import config
import services
from main import dp


class FSMOrder(state.StatesGroup):
    ask_about_create_order = state.State()
    input_first_name = state.State()
    input_last_name = state.State()
    input_phone = state.State()
    ask_about_comment = state.State()
    input_comment = state.State()


class FSMAddProductToCart(state.StatesGroup):
    input_code_product = state.State()
    input_quantity = state.State()
    input_warehouse = state.State()


class FSMDeleteProductToCart(state.StatesGroup):
    confirm_delete = state.State()


class FSMDeleteProductFromOrder(state.StatesGroup):
    confirm_delete = state.State()


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
@dp.message_handler(Text('–ü—Ä–∏–≤–µ—Ç'))
async def sey_hello(message: Message):
    username = message['from']['first_name'] if message.text else ''
    await message.answer(f"{message.text} {username}, —Ç–≤–æ–π id={message['from']['id']}")


# Reply –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞
# @dp.message_handler(Command('shop'))
# async def show_shop(message: Message):
#     await message.answer('Shop', reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ö–Ω–æ–ø–∫–∞ 1', '–ö–Ω–æ–ø–∫–∞ 2', '–ö–Ω–æ–ø–∫–∞ 3']))
async def get_goods(message: Message):
    await message.answer(f'–ù–∞–∂–∞—Ç–∞: {message.text}', reply_markup=ReplyKeyboardRemove())


# –†–∞–±–æ—á–∏–π –º–∞–≥–∞–∑–∏–Ω

@dp.message_handler(Command(['start', 'help']))
async def start_message(message: Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ë–∞—Ä–∞—Ö–ª–æ –®–æ–ø!',
                         reply_markup=await services.get_start_menu())


@dp.message_handler(Command('üì¶–¢–æ–≤–∞—Ä—ã'))
async def show_products(message: Message):
    kb_categories = await services.get_categories()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', reply_markup=kb_categories)


@dp.message_handler(Command('üõí–ö–æ—Ä–∑–∏–Ω–∞'))
async def show_cart(message: Message):
    cart_info = await services.get_cart(message.from_user.id)

    if cart_info['amount_cart'] == 0:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        return

    await message.answer('–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:')

    for product in cart_info:
        if product != 'amount_cart':
            await message.answer(product, reply_markup=cart_info[product])

    await message.answer(f'–û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {cart_info["amount_cart"]:10.2f}')


@dp.callback_query_handler(text_contains='cancel')
async def cancel(call: CallbackQuery):
    # await call.answer('–û—Ç–º–µ–Ω–∞', show_alert=True)
    # await call.message.edit_text('...')
    # await call.message.edit_reply_markup(reply_markup=None)
    await call.message.delete()


@dp.callback_query_handler(lambda cq: 'category_nested_pk' in cq.data)
async def get_subcategory_list(call: CallbackQuery):
    await call.answer(cache_time=60)
    subcategory_pk = call.data.replace('category_nested_pk', '')
    kb_subcategories = await services.get_categories(subcategory_pk)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb_subcategories)


@dp.callback_query_handler(lambda cq: 'category_pk' in cq.data)
async def get_product_list(call: CallbackQuery):
    await call.answer(cache_time=60)
    category_pk = call.data.replace('category_pk', '')
    kb_products = await services.get_product_list(category_pk)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', reply_markup=kb_products)


@dp.callback_query_handler(lambda cq: 'show_product' in cq.data)
async def get_product(call: CallbackQuery):
    await call.answer(cache_time=60)
    product_pk = call.data.replace('show_product', '')
    kb_show_product, result_str, url_photo = await services.get_product_info(product_pk)
    await call.message.answer(f'{url_photo}\n{result_str}', reply_markup=kb_show_product)


# @dp.callback_query_handler(lambda cq: 'back_to_category' in cq.data)
# async def get_


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ö–æ—Ä–∑–∏–Ω—É
# **********************************************************************************************************************
# –ù–∞—á–Ω–µ–º —Å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞, –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞ –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
@dp.callback_query_handler(lambda cq: 'add_product_to_cart' in cq.data, state=None)
async def add_product_to_cart(call: CallbackQuery):
    product_pk = call.data.replace('add_product_to_cart', '')
    await FSMAddProductToCart.input_code_product.set()
    await call.message.answer('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=await services.get_confirm_add_product_to_cart(product_pk))


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ –∑–∞–≤–µ—Ä—à–∏–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(lambda cq: 'not_confirm_add_product_to_cart' in cq.data, state=FSMAddProductToCart.input_code_product)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text('–¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=None)


@dp.callback_query_handler(lambda cq: 'confirm_add_product_to_cart' in cq.data, state=FSMAddProductToCart.input_code_product)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    product_pk = call.data.replace('confirm_add_product_to_cart', '')

    async with state.proxy() as data:
        data['product_pk'] = product_pk

    await FSMAddProductToCart.next()
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=FSMAddProductToCart.input_quantity)
async def input_quantity(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if not message.text.isdigit():
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
            return

        data['quantity'] = message.text
        data['id_messenger'] = message.from_user.id
        product_pk = data['product_pk']

    await FSMAddProductToCart.next()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=await services.get_warehouses_kb(product_pk, message.text))


@dp.callback_query_handler(lambda cq: 'warehouse_pk' in cq.data, state=FSMAddProductToCart.input_warehouse)
async def input_warehouse(call: CallbackQuery, state: FSMContext):
    warehouse_pk = call.data.replace('warehouse_pk', '')
    # —á—Ç–æ –±—ã –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª –∫–Ω–æ–ø–∫—É –∏ –Ω–µ –ø–ª–æ–¥–∏–ª –¥—É–±–ª–∏
    await call.message.delete()

    async with state.proxy() as data:
        data['warehouse_pk'] = warehouse_pk
        # –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–ª–æ–≤–∞—Ä–µ–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç <class 'aiogram.dispatcher.storage.FSMContextProxy'> –ª–µ–≥–∫–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        product_cart_new = {**data}
        await services.add_product_to_cart(product_cart_new)
        await call.message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=await services.get_start_menu())

    await state.finish()


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
# **************************************************************************************************************


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
# **************************************************************************************************************
@dp.callback_query_handler(lambda cq: 'delete_product_from_cart' in cq.data, state=None)
async def delete_product_from_cart(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await FSMDeleteProductToCart.confirm_delete.set()
    product_pk = call.data.replace('delete_product_from_cart', '')

    async with state.proxy() as data:
        data['product_pk'] = product_pk

    await call.message.answer('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?', reply_markup=await services.get_answer_yes_no_kb())


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ –∑–∞–≤–µ—Ä—à–∏–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(lambda cq: 'answer_yes_no0' in cq.data, state=FSMDeleteProductToCart.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('–¢–æ–≤–∞—Ä –æ—Å—Ç–∞–ª—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ', reply_markup=await services.get_start_menu())


@dp.callback_query_handler(lambda cq: 'answer_yes_no1' in cq.data, state=FSMDeleteProductToCart.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        product_cart_info = {
            'product_pk': data['product_pk'],
            'id_messenger': call.from_user.id
        }

    await services.delete_product_from_cart(product_cart_info)
    await state.finish()
    await call.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', reply_markup=await services.get_start_menu())


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
# **************************************************************************************************************


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ó–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# **************************************************************************************************************
@dp.message_handler(Command('üßæ–ó–∞–∫–∞–∑'), state=None)
async def ask_about_create_order(message: Message):
    cart_empty = await services.checkCart(message.from_user.id)

    if cart_empty:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä—ã')
        return

    await FSMOrder.ask_about_create_order.set()
    await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=await services.get_answer_yes_no_kb())


@dp.callback_query_handler(lambda cq: 'answer_yes_no' in cq.data, state=FSMOrder.ask_about_create_order)
async def add_product(call: CallbackQuery, state: FSMContext):
    answer = call.data.replace('answer_yes_no', '')

    if answer == '1':
        await FSMOrder.next()
        await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–º—è:', reply_markup=ReplyKeyboardRemove())
    else:
        await call.message.delete()
        await state.finish()


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FSMOrder.input_first_name)
async def input_first_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text

    await FSMOrder.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:', reply_markup=ReplyKeyboardRemove())


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=FSMOrder.input_last_name)
async def input_last_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text

    await FSMOrder.next()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É:', reply_markup=await services.get_contact_kb())


# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(content_types=['contact'], state=FSMOrder.input_phone)
async def get_contact(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.contact.phone_number
        data['id_messenger'] = message.contact.user_id

    await FSMOrder.next()
    await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?', reply_markup=await services.get_answer_yes_no_kb())


@dp.callback_query_handler(lambda cq: 'answer_yes_no' in cq.data, state=FSMOrder.ask_about_comment)
async def get_comment(call: CallbackQuery, state: FSMContext):
    answer = call.data.replace('answer_yes_no', '')

    if answer == '1':
        await FSMOrder.next()
        await call.message.answer('–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=ReplyKeyboardRemove())
    else:
        async with state.proxy() as data:
            order_info = {**data}
            await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞.', reply_markup=await services.get_start_menu())
            # order_info = await services.create_order(order_info)
            # prices = [LabeledPrice('–†—É–±', int(order_info['amount']) * 100), ]
            order_info['id'] = 0
            prices = [LabeledPrice('–†—É–±', 99900), ]

            await call.bot.send_invoice(
                chat_id=call.message.chat.id,
                title='–ó–∞–∫–∞–∑',
                description='–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
                payload=f"order ‚Ññ{order_info['id']}",
                provider_token=config.PROVIDER_TOKEN,
                currency='RUB',
                prices=prices,
                start_parameter='test',
            )

        await state.finish()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, True)


# –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –ø–ª–∞—Ç–µ–∂
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: Message):
    if 'order ‚Ññ' in message.successful_payment.invoice_payload:
        await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=await services.get_start_menu())


# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
@dp.message_handler(state=FSMOrder.input_comment)
async def input_comment(message: Message, state: FSMContext):

    async with state.proxy() as data:
        data['comment'] = message.text
        order_info = {**data}
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞.', reply_markup=await services.get_start_menu())
        await services.create_order(order_info)

    await state.finish()


# @dp.message_handler(lambda cq: 'payment_yookassa' in cq.data)


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ó–∞–∫–∞–∑–∞
# **********************************************************************************************************************


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
@dp.message_handler(Command('üíº–ò—Å—Ç–æ—Ä–∏—è_–∑–∞–∫–∞–∑–æ–≤'))
async def get_order_list(message: Message):
    kb_orders = await services.get_order_list(message.from_user.id)

    if not kb_orders:
        await message.answer('–£ –í–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤, –Ω–æ —ç—Ç–æ –ª–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ;)')
        return

    await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:', reply_markup=kb_orders)


# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda cq: 'order_pk' in cq.data)
async def get_order(call: CallbackQuery):
    order_pk = call.data.replace('order_pk', '')
    order_products, order_info = await services.get_order(order_pk)

    if not order_products:
        await call.message.answer('–ó–∞–∫–∞–∑ –ø—É—Å—Ç')
        return

    if order_info:
        await call.message.answer(
            f"{order_info['order']} –Ω–∞ —Å—É–º–º—É {order_info['amount']}\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_info['status']['repr']}\n–î–æ—Å—Ç–∞–≤–∫–∞: {order_info['delivery_type']['repr']}\n–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {order_info['payment_type']['repr']}\n–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:"
        )

    for product in order_products:
        await call.message.answer(product, reply_markup=order_products[product])


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
# **************************************************************************************************************
@dp.callback_query_handler(lambda cq: 'delete_product_from_order' in cq.data, state=None)
async def delete_product_from_cart(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await FSMDeleteProductFromOrder.confirm_delete.set()
    param_list = call.data.replace('delete_product_from_order', '').split(':')
    product_pk = param_list[0]
    order_pk = param_list[1]

    async with state.proxy() as data:
        data['product_pk'] = product_pk
        data['order_pk'] = order_pk

    await call.message.answer('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞?', reply_markup=await services.get_answer_yes_no_kb())


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ –∑–∞–≤–µ—Ä—à–∏–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(lambda cq: 'answer_yes_no0' in cq.data, state=FSMDeleteProductFromOrder.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('–¢–æ–≤–∞—Ä –æ—Å—Ç–∞–ª—Å—è –≤ –∑–∞–∫–∞–∑–µ', reply_markup=await services.get_start_menu())


@dp.callback_query_handler(lambda cq: 'answer_yes_no1' in cq.data, state=FSMDeleteProductFromOrder.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        product_cart_info = {
            'product_pk': data['product_pk'],
            'order_pk': data['order_pk'],
            'id_messenger': call.from_user.id
        }

    await services.delete_product_from_order(product_cart_info)
    await state.finish()
    await call.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–∫–∞–∑–∞', reply_markup=await services.get_start_menu())


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
# **************************************************************************************************************
