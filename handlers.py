from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command, state
import config
import services
from main import dp


class FSMOrder(state.StatesGroup):
    ask_about_create_order = state.State()
    input_first_name = state.State()
    input_last_name = state.State()
    input_city = state.State()
    input_street = state.State()
    input_house = state.State()
    input_phone = state.State()
    ask_about_comment = state.State()
    input_comment = state.State()


class FSMAddProductToCart(state.StatesGroup):
    input_code_product = state.State()
    input_quantity = state.State()
    input_warehouse = state.State()


class FSMDeleteProductToCart(state.StatesGroup):
    confirm_delete = state.State()


class FSMDeleteProductFromOrder(state.StatesGroup):
    confirm_delete = state.State()


class FSMPaymentOrder(state.StatesGroup):
    confirm_payment = state.State()


@dp.message_handler(Command(['start', 'help']))
async def start_message(message: Message):
    await message.answer(text='ü§ñ: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç –°–∫–∏–¥–æ–∫! –ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫."',
                         reply_markup=await services.get_start_menu(message.from_user.id))


@dp.message_handler(Text('üì¶–¢–æ–≤–∞—Ä—ã'))
async def show_products(message: Message):
    kb_categories = await services.get_categories()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', reply_markup=kb_categories)


# @dp.message_handler(Text('üõí–ö–æ—Ä–∑–∏–Ω–∞'))
@dp.message_handler(lambda msg: 'üõí–ö–æ—Ä–∑–∏–Ω–∞' in msg.text)
async def show_cart(message: Message):
    cart_info = await services.get_cart(message.from_user.id)

    if cart_info['amount_cart'] == 0:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        return

    await message.answer('–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:')

    for product in cart_info:
        if product != 'amount_cart' and product != 'current_sign':
            await message.answer(product, reply_markup=cart_info[product])

    await message.answer(f"–û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {cart_info['amount_cart']:10.2f}{cart_info['current_sign']}")


@dp.callback_query_handler(text_contains='cancel')
async def cancel(call: CallbackQuery):
    # await call.answer('–û—Ç–º–µ–Ω–∞', show_alert=True)
    # await call.message.edit_text('...')
    # await call.message.edit_reply_markup(reply_markup=None)
    await call.message.delete()


@dp.callback_query_handler(lambda cq: 'category_nested_pk' in cq.data)
async def get_subcategory_list(call: CallbackQuery):
    await call.answer(cache_time=60)
    subcategory_pk = call.data.replace('category_nested_pk', '')
    kb_subcategories = await services.get_categories(subcategory_pk)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb_subcategories)


@dp.callback_query_handler(lambda cq: 'category_pk' in cq.data)
async def get_product_list(call: CallbackQuery):
    await call.answer(cache_time=60)
    category_pk = call.data.replace('category_pk', '')
    kb_products = await services.get_product_list(category_pk)
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', reply_markup=kb_products)


@dp.callback_query_handler(lambda cq: 'show_product' in cq.data)
async def get_product(call: CallbackQuery):
    await call.answer(cache_time=60)
    product_pk = call.data.replace('show_product', '')
    kb_show_product, info_str, url_photo = await services.get_product_info(product_pk)

    if config.DEBUG_MODE:
        await call.message.answer(text=f'{url_photo}\n{info_str}', reply_markup=kb_show_product)
    else:
        await call.bot.send_photo(call.message.chat.id, url_photo, info_str, reply_markup=kb_show_product)


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ö–æ—Ä–∑–∏–Ω—É
# **********************************************************************************************************************
# –ù–∞—á–Ω–µ–º —Å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞, –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞ –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
@dp.callback_query_handler(lambda cq: 'add_product_to_cart' in cq.data, state=None)
async def add_product_to_cart(call: CallbackQuery):
    product_pk = call.data.replace('add_product_to_cart', '')
    await FSMAddProductToCart.input_code_product.set()
    await call.message.answer('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?', reply_markup=await services.get_confirm_add_product_to_cart(product_pk))


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ –∑–∞–≤–µ—Ä—à–∏–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(lambda cq: 'not_confirm_add_product_to_cart' in cq.data, state=FSMAddProductToCart.input_code_product)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text('–¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=None)


@dp.callback_query_handler(lambda cq: 'confirm_add_product_to_cart' in cq.data, state=FSMAddProductToCart.input_code_product)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    product_pk = call.data.replace('confirm_add_product_to_cart', '')

    async with state.proxy() as data:
        data['product_pk'] = product_pk

    await FSMAddProductToCart.next()
    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=FSMAddProductToCart.input_quantity)
async def input_quantity(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if not message.text.isdigit():
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
            return

        data['quantity'] = message.text
        data['id_messenger'] = message.from_user.id
        product_pk = data['product_pk']

    await FSMAddProductToCart.next()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=await services.get_warehouses_kb(product_pk, message.text))


@dp.callback_query_handler(lambda cq: 'warehouse_pk' in cq.data, state=FSMAddProductToCart.input_warehouse)
async def input_warehouse(call: CallbackQuery, state: FSMContext):
    warehouse_pk = call.data.replace('warehouse_pk', '')
    # —á—Ç–æ –±—ã –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª –∫–Ω–æ–ø–∫—É –∏ –Ω–µ –ø–ª–æ–¥–∏–ª –¥—É–±–ª–∏
    await call.message.delete()

    async with state.proxy() as data:
        data['warehouse_pk'] = warehouse_pk
        # –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–ª–æ–≤–∞—Ä–µ–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç <class 'aiogram.dispatcher.storage.FSMContextProxy'> –ª–µ–≥–∫–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        product_cart_new = {**data}
        await services.add_product_to_cart(product_cart_new)
        await call.message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=await services.get_start_menu(call.from_user.id))

    await state.finish()


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
# **************************************************************************************************************


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
# **************************************************************************************************************
@dp.callback_query_handler(lambda cq: 'delete_product_from_cart' in cq.data, state=None)
async def delete_product_from_cart(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await FSMDeleteProductToCart.confirm_delete.set()
    product_pk = call.data.replace('delete_product_from_cart', '')

    async with state.proxy() as data:
        data['product_pk'] = product_pk

    await call.message.answer('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?', reply_markup=await services.get_answer_yes_no_kb())


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ –∑–∞–≤–µ—Ä—à–∏–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(lambda cq: 'answer_yes_no0' in cq.data, state=FSMDeleteProductToCart.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('–¢–æ–≤–∞—Ä –æ—Å—Ç–∞–ª—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ', reply_markup=await services.get_start_menu(call.from_user.id))


@dp.callback_query_handler(lambda cq: 'answer_yes_no1' in cq.data, state=FSMDeleteProductToCart.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['id_messenger'] = call.from_user.id
        product_cart_info = {**data}
        await services.delete_product_from_cart(product_cart_info)
        await call.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', reply_markup=await services.get_start_menu(call.from_user.id))
    
    await state.finish()


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
# **************************************************************************************************************


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ó–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# **************************************************************************************************************
@dp.message_handler(Text('üßæ–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), state=None)
async def ask_about_create_order(message: Message):
    cart_empty = await services.check_cart(message.from_user.id)

    if cart_empty:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä.')
        return

    await FSMOrder.ask_about_create_order.set()
    await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=await services.get_answer_yes_no_kb())


@dp.callback_query_handler(lambda cq: 'answer_yes_no' in cq.data, state=FSMOrder.ask_about_create_order)
async def add_product(call: CallbackQuery, state: FSMContext):
    answer = call.data.replace('answer_yes_no', '')

    if answer == '1':
        # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î, –¥–æ–±–∞–≤–ª—é —Ç–æ–≤–∞—Ä –∫ –Ω–µ–º—É –≤–º–µ—Å—Ç–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        id_messenger = call.from_user.id
        orders = await services.get_orders_for_messenger(id_messenger, 0)

        if orders:
            order_info = orders[0]
            # order_info['status_pk'] = 1 # —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–∞–º –±—ç–∫–µ–Ω–¥ —Å–∞–π—Ç–∞
            order_info = await services.create_or_update_order(order_info)
            result_check = services.check_before_payment(order_info)
            
            if result_check:
                await call.message.answer(result_check, reply_markup=await services.get_start_menu(call.from_user.id))
                await state.finish()
                return

            await call.message.answer('–í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –µ–≥–æ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å.', reply_markup=await services.get_start_menu(call.from_user.id))
            await order_payment(call.message, order_info)
            await state.finish()
            return
            # ****************************************************************************************

        await FSMOrder.next()
        await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–º—è:', reply_markup=ReplyKeyboardRemove())
    else:
        await call.message.delete()
        await state.finish()


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FSMOrder.input_first_name)
async def input_first_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text

    await FSMOrder.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:', reply_markup=ReplyKeyboardRemove())


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=FSMOrder.input_last_name)
async def input_last_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text

    await FSMOrder.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:', reply_markup=ReplyKeyboardRemove())


# –õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=FSMOrder.input_city)
async def input_last_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text.strip()) < 3:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMOrder.input_city)
            return

        data['address'] = f'–ì–æ—Ä–æ–¥: {message.text}'

    await FSMOrder.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:', reply_markup=ReplyKeyboardRemove())


# –õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã
@dp.message_handler(state=FSMOrder.input_street)
async def input_last_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text.strip()) < 5:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —É–ª–∏—Ü—ã:', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMOrder.input_street)
            return

        data['address'] += f', —É–ª–∏—Ü–∞: {message.text}'

    await FSMOrder.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:', reply_markup=ReplyKeyboardRemove())


# –õ–æ–≤–∏–º –Ω–æ–º–µ—Ä –¥–æ–º–∞
@dp.message_handler(state=FSMOrder.input_house)
async def input_last_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text.strip()) < 1:
            await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞. –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –¥–æ–º–∞:', reply_markup=ReplyKeyboardRemove())
            await state.set_state(FSMOrder.input_house)
            return

        data['address'] += f', –¥–æ–º: {message.text}'

    await FSMOrder.next()
    await message.answer('<strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –ë–û–õ–¨–®–£–Æ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞</strong>', reply_markup=await services.get_contact_kb())


# –õ–æ–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
@dp.message_handler(content_types=['contact'], state=FSMOrder.input_phone)
async def get_contact(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.contact.phone_number
        data['id_messenger'] = message.contact.user_id

    await FSMOrder.next()
    await message.answer('–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!', reply_markup=await services.get_start_menu(message.from_user.id))
    await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?', reply_markup=await services.get_answer_yes_no_kb())


@dp.callback_query_handler(lambda cq: 'answer_yes_no' in cq.data, state=FSMOrder.ask_about_comment)
async def get_comment(call: CallbackQuery, state: FSMContext):
    answer = call.data.replace('answer_yes_no', '')

    if answer == '1':
        await FSMOrder.next()
        await call.message.answer('–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=ReplyKeyboardRemove())
    else:
        async with state.proxy() as data:
            order_info = {**data}
            order_info = await services.create_or_update_order(order_info)
            result_check = services.check_before_payment(order_info)
            
            if result_check:
                await call.message.answer(result_check, reply_markup=await services.get_start_menu(call.from_user.id))
                await state.finish()
                return

            await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞.', reply_markup=await services.get_start_menu(call.from_user.id))
            await order_payment(call.message, order_info)

        await state.finish()


async def order_payment(message: Message, order_info: dict) -> None:
    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –≤ –±—É–¥—É—â–µ–º –º—ã –ø–æ–¥–∫–ª—é—á–∏–º –µ—ë. –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –∫—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.', reply_markup=await services.get_start_menu(message.from_user.id))
    
    ## –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–∫–ª—é—á–∏–º –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç—É
    # prices = [LabeledPrice('–†—É–±', int(order_info['amount']) * 100), ]

    # await message.bot.send_invoice(
    #     chat_id=message.chat.id,
    #     title='–ó–∞–∫–∞–∑',
    #     description='–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
    #     payload=f"order_pk{order_info['id']}",
    #     provider_token=config.PROVIDER_TOKEN,
    #     currency='RUB',
    #     prices=prices,
    #     start_parameter='test',
    # )


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫–∏–∏ pre_checkout_query.id
@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    # –µ—Å–ª–∏ check_info –ø—É—Å—Ç, —Ç–æ –≤—Å–µ –û–ö, –∏–Ω–∞—á–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –±—É–¥–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    order_pk = pre_checkout_query.invoice_payload.replace('order_pk', '')
    check_info = await services.check_stock_in_order(order_pk)
    confirm = False if check_info else True
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, confirm)


# –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –ø–ª–∞—Ç–µ–∂
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: Message):
    if 'order_pk' in message.successful_payment.invoice_payload:
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –≤ –ó–∞–∫–∞–∑–µ –Ω–∞ –û–ø–ª–∞—á–µ–Ω
        order_pk = message.successful_payment.invoice_payload.replace('order_pk', '')
        await services.set_order_payment(order_pk)
        await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=await services.get_start_menu())


# –õ–æ–≤–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
@dp.message_handler(state=FSMOrder.input_comment)
async def input_comment(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['comment'] = message.text
        order_info = {**data}
        order_info = await services.create_or_update_order(order_info)
        result_check = services.check_before_payment(order_info)
            
        if result_check:
            await message.answer(result_check, reply_markup=await services.get_start_menu())
            await state.finish()
            return
        
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞.', reply_markup=await services.get_start_menu())
        await order_payment(message, order_info)

    await state.finish()


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ó–∞–∫–∞–∑–∞
# **********************************************************************************************************************


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
@dp.message_handler(Text('üíº–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã'))
async def get_order_list(message: Message):
    kb_orders = await services.get_kb_order_list(message.from_user.id, 0)

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –±—É–¥–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞
    if len(kb_orders.values['inline_keyboard']) == 1:
        await message.answer('–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç')
        return

    await message.answer('–í–∞—à–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', reply_markup=kb_orders)


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
@dp.message_handler(Text('üíºüí∞–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã'))
async def get_order_list(message: Message):
    kb_orders = await services.get_kb_order_list(message.from_user.id, 1)

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –±—É–¥–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    if len(kb_orders.values['inline_keyboard']) == 1:
        await message.answer('–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç')
        return

    await message.answer('–í–∞—à–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', reply_markup=kb_orders)


# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda cq: 'show_order_pk' in cq.data)
async def get_order(call: CallbackQuery):
    param_list = call.data.replace('show_order_pk', '').split(':')
    order_pk = param_list[0]
    paid = int(param_list[1]) if param_list[1].isdigit() else 0
    order_products_kb, order_info = await services.get_kb_order_info(order_pk, paid)

    if not order_products_kb:
        await call.message.answer('–ó–∞–∫–∞–∑ –ø—É—Å—Ç.')
        return

    order_sum_info = f"{order_info['order_repr']}–Ω–∞ —Å—É–º–º—É {order_info['amount']}{order_info['currency']['sign']}"
    order_status_info = f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: <i>{order_info['status']['name']}</i>"
    order_delivery_info = f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: <i>{order_info['delivery_type']['name']}</i>"
    order_type_payment = f"–¢–∏–ø –æ–ø–ª–∞—Ç—ã: <i>{order_info['payment_type']['name']}</i>"
    order_address = f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <i>{order_info['address']}</i>"

    if order_info:
        await call.message.answer(
            f"{order_sum_info}\n{order_status_info}\n{order_delivery_info}\n{order_type_payment}\n{order_address}\n<strong>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</strong>"
        )

    for product in order_products_kb:
        await call.message.answer(product, reply_markup=order_products_kb[product])


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
# **************************************************************************************************************
@dp.callback_query_handler(lambda cq: 'delete_product_from_order' in cq.data, state=None)
async def delete_product_from_cart(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await FSMDeleteProductFromOrder.confirm_delete.set()
    param_list = call.data.replace('delete_product_from_order', '').split(':')
    product_pk = param_list[0]
    order_pk = param_list[1]

    async with state.proxy() as data:
        data['product_pk'] = product_pk
        data['order_pk'] = order_pk

    await call.message.answer('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞?', reply_markup=await services.get_answer_yes_no_kb())


# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–Ω–µ—Ç", —Ç–æ –∑–∞–≤–µ—Ä—à–∏–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(lambda cq: 'answer_yes_no0' in cq.data, state=FSMDeleteProductFromOrder.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('–¢–æ–≤–∞—Ä –æ—Å—Ç–∞–ª—Å—è –≤ –∑–∞–∫–∞–∑–µ', reply_markup=await services.get_start_menu(call.from_user.id))


@dp.callback_query_handler(lambda cq: 'answer_yes_no1' in cq.data, state=FSMDeleteProductFromOrder.confirm_delete)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['id_messenger'] = call.from_user.id
        product_cart_info = {**data}
        await services.delete_product_from_cart(product_cart_info)
        await call.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–∫–∞–∑–∞', reply_markup=await services.get_start_menu(call.from_user.id))

    await state.finish()


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
# **************************************************************************************************************


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
# **************************************************************************************************************
@dp.callback_query_handler(lambda cq: 'payment_for_order' in cq.data, state=None)
async def start_payment(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await FSMPaymentOrder.confirm_payment.set()
    param_list = call.data.replace('payment_for_order', '').split(':')
    order_pk = param_list[0]
    order_amount = param_list[1]
    
    async with state.proxy() as data:
        data['id'] = order_pk
        data['amount'] = float(order_amount)
    
    await call.message.answer(f'–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É: {order_amount}?', reply_markup=await services.get_answer_yes_no_kb())


# –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda cq: 'answer_yes_no0' in cq.data, state=FSMPaymentOrder.confirm_payment)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø–æ–∑–∂–µ –µ–≥–æ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å.', reply_markup=await services.get_start_menu(call.from_user.id))


# –æ–ø–ª–∞—á–∏–≤–∞—é—Ç –∑–∞–∫–∞–∑
@dp.callback_query_handler(lambda cq: 'answer_yes_no1' in cq.data, state=FSMPaymentOrder.confirm_payment)
async def confirm_product(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        order_info = {**data}
        await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞.', reply_markup=await services.get_start_menu(call.from_user.id))
        await order_payment(call.message, order_info)

    await state.finish()


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
# **************************************************************************************************************
