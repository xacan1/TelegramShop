import aiohttp
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import config

HEADERS = {
    'content-type': 'application/json',
    'authorization': config.API_TOKEN
}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ
# *******************************************************************************************


# –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ó–∞–∫–∞–∑–∞
def check_before_payment(order_info: dict) -> str:
    result = ''

    if order_info['amount'] < 1:
        result = '–ó–∞–∫–∞–∑ —Å –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π. –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.'
        return result

    if 'error' in order_info:
        result = '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.'
        return result

    return result


async def get_order(session: aiohttp.ClientSession,  order_pk: int, paid: int) -> dict:
    order_info = {}
    params_get = {'pk': order_pk, 'paid': paid}

    async with session.get(f'{config.ADDR_SERV}/api/v1/orders', params=params_get) as resp:
        if resp.ok:
            orders = await resp.json()

            if orders:
                order_info = orders[0]

    return order_info


async def get_category_by_pk(session: aiohttp.ClientSession, category_pk: str) -> dict:
    category_info = {}

    async with session.get(f'{config.ADDR_SERV}/api/v1/products/categories/{category_pk}') as resp:
        if resp.ok:
            category_info = await resp.json()

    return category_info


# –ø–æ–ª—É—á–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∏–Ω—Ñ—É –æ —Ç–æ–≤–∞—Ä–µ (–æ—Å—Ç–∞—Ç–∫–∏ –∏ —Ü–µ–Ω—ã) –∏ –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –Ω–∞ –Ω–µ–≥–æ
async def get_product_by_pk(session: aiohttp.ClientSession, product_pk: str) -> dict:
    product_info = {}

    async with session.get(f'{config.ADDR_SERV}/api/v1/products/{product_pk}') as resp:
        if resp.ok:
            product_info = await resp.json()
            all_prices = product_info.get('get_prices', [])
            product_info['price'] = 0.0
            product_info['discount_percentage'] = 0

            if all_prices:
                product_info['price'] = all_prices[-1].get('price', 0.0)
                product_info['discount_percentage'] = all_prices[-1].get(
                    'discount_percentage', 0)

    return product_info


# –ø–æ–ª—É—á–∏–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –ó–∞–∫–∞–∑–∞ –∏–∑ API —Å–ø–∏—Å–∫–∞(Retrieve –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –Ω–∞ Django, –Ω–µ –Ω—É–∂–µ–Ω)
async def get_cart_product(session: aiohttp.ClientSession, cart_order_pk: int, product_pk: int, id_messenger: int, for_order=False) -> dict:
    product_cart_info = {}
    params_get = {'product': product_pk, 'id_messenger': id_messenger}

    if for_order:
        params_get['order'] = cart_order_pk
    else:
        params_get['cart'] = cart_order_pk

    async with session.get(f'{config.ADDR_SERV}/api/v1/carts/product_to_cart', params=params_get) as resp:
        if resp.ok:
            product_carts = await resp.json()

            if product_carts:
                product_cart_info = product_carts[0]
                product_cart_info['pk'] = product_cart_info.get('id', 0)

    return product_cart_info


# –ø–æ–ª—É—á–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–æ—Ä–∑–∏–Ω—ã
async def get_cart_products(session: aiohttp.ClientSession, cart_pk: int, id_messenger: int) -> list[dict]:
    product_carts = []
    params_get = {'cart': cart_pk, 'id_messenger': id_messenger}

    async with session.get(f'{config.ADDR_SERV}/api/v1/carts/product_to_cart', params=params_get) as resp:
        if resp.ok:
            product_carts = await resp.json()

    return product_carts


# –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –ó–∞–∫–∞–∑–µ (product_to_cart - –æ–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–∫ –¥–ª—è —Å—Ç—Ä–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã —Ç–∞–∫ –∏ –¥–ª—è —Å—Ç—Ä–æ–∫ –∑–∞–∫–∞–∑–æ–≤)
async def get_order_products(session: aiohttp.ClientSession, order_pk: str) -> list[dict]:
    product_order = []
    params_get = {'order': order_pk}

    async with session.get(f'{config.ADDR_SERV}/api/v1/carts/product_to_cart', params=params_get) as resp:
        if resp.ok:
            product_order = await resp.json()

    return product_order


async def get_status(session: aiohttp.ClientSession) -> int:
    status_pk = 0
    params_get = {'for_bot': 1}

    async with session.get(f'{config.ADDR_SERV}/api/v1/statuses', params=params_get) as resp:
        if resp.ok:
            statuses = await resp.json()
            status_pk = statuses[0]['id']

    return status_pk


async def get_payment_type(session: aiohttp.ClientSession) -> int:
    payment_type_pk = 0
    params_get = {'for_bot': 1}

    async with session.get(f'{config.ADDR_SERV}/api/v1/payment_types', params=params_get) as resp:
        if resp.ok:
            payment_types = await resp.json()
            payment_type_pk = payment_types[0]['id']

    return payment_type_pk


async def get_delivery_type(session: aiohttp.ClientSession) -> int:
    delivery_type_pk = 0
    params_get = {'for_bot': 1}

    async with session.get(f'{config.ADDR_SERV}/api/v1/delivery_types', params=params_get) as resp:
        if resp.ok:
            delivery_types = await resp.json()
            delivery_type_pk = delivery_types[0]['id']

    return delivery_type_pk


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–≤–∞—Ä—ã
async def check_cart(id_messenger: int) -> bool:
    product_carts = None

    cart_info = await get_cart_info(id_messenger)
    product_carts = cart_info['products']

    return True if not product_carts else False


# –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
# *******************************************************************************************


async def get_start_menu() -> ReplyKeyboardMarkup:
    kb_start = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_menu_btn_select = KeyboardButton(text='/üì¶–¢–æ–≤–∞—Ä—ã')
    kb_menu_btn_cart = KeyboardButton(text='/üõí–ö–æ—Ä–∑–∏–Ω–∞')
    kb_menu_btn_order = KeyboardButton(text='/üßæ–ó–∞–∫–∞–∑')
    kb_menu_btn_order_list = KeyboardButton(text='/üíº–í–∞—à–∏_–∑–∞–∫–∞–∑—ã')
    kb_start.add(kb_menu_btn_select)
    kb_start.insert(kb_menu_btn_cart)
    kb_start.insert(kb_menu_btn_order)
    kb_start.insert(kb_menu_btn_order_list)

    return kb_start


# –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact_kb() -> ReplyKeyboardMarkup:
    kb_contact = ReplyKeyboardMarkup(resize_keyboard=True)
    new_button = KeyboardButton(text='üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                                request_contact=True)
    kb_contact.add(new_button)

    return kb_contact


# –æ–±—â–∏–π –¥–∏–∞–ª–æ–≥ –î–∞-–ù–µ—Ç –¥–ª—è –º–Ω–æ–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def get_answer_yes_no_kb() -> InlineKeyboardMarkup:
    kb_yes_no = InlineKeyboardMarkup(row_width=2)

    button_yes = InlineKeyboardButton(
        text='–î–∞',
        callback_data='answer_yes_no1'
    )

    kb_yes_no.add(button_yes)

    button_no = InlineKeyboardButton(
        text='–ù–µ—Ç',
        callback_data='answer_yes_no0'
    )

    kb_yes_no.insert(button_no)

    return kb_yes_no


# –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
# –µ—Å–ª–∏ category_pk = 0, —Ç–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–≥—Ä—É–ø–ø–µ,
# –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º nested_category, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ç–æ–≥–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø, –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
async def get_categories(category_pk: int = 0) -> InlineKeyboardMarkup:
    async with aiohttp.ClientSession(headers=HEADERS) as session:
        params_get = {'category_pk': category_pk} if category_pk else {
            'top_level_only': 1}

        async with session.get(f'{config.ADDR_SERV}/api/v1/products/categories', params=params_get) as resp:
            categories = await resp.json()
            kb_categories = InlineKeyboardMarkup(row_width=1)

            for category in categories:
                subcategories = category.get('nested_category', [])
                category_pk = category.get('pk', ' ')

                if subcategories:
                    new_button = InlineKeyboardButton(
                        text=category.get('name', ' '),
                        callback_data=f'category_nested_pk{category_pk}'
                    )
                else:
                    new_button = InlineKeyboardButton(
                        text=category.get('name', ' '),
                        callback_data=f'category_pk{category_pk}'
                    )

                kb_categories.add(new_button)

            button_cancel = InlineKeyboardButton(
                text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'
            )
            kb_categories.add(button_cancel)

    return kb_categories


async def get_product_list(category_pk: str) -> InlineKeyboardMarkup:
    async with aiohttp.ClientSession(headers=HEADERS) as session:
        params_get = {'category_pk': category_pk}

        async with session.get(f'{config.ADDR_SERV}/api/v1/products', params=params_get) as resp:
            products = await resp.json()
            kb_products = InlineKeyboardMarkup(row_width=1)

            for product in products:
                name = product.get('name', ' ')
                product_pk = product.get('pk', ' ')

                new_button = InlineKeyboardButton(
                    text=name,
                    callback_data=f'show_product{product_pk}'
                )
                kb_products.add(new_button)

            button_back = InlineKeyboardButton(
                text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'
            )
            kb_products.add(button_back)

    return kb_products


# –≤—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
async def get_product_info(product_pk: str) -> tuple[InlineKeyboardMarkup, str, str]:
    async with aiohttp.ClientSession(headers=HEADERS) as session:
        product_info = await get_product_by_pk(session, product_pk)
        url_photo = product_info.get('photo', '')
        price = product_info.get('price', 0.00)
        stock_products = product_info.get('get_stock_product', [])
        info = f"{product_info.get('name', '')}\n----------\n–Ω–∞–ª–∏—á–∏–µ:\n"

        for stock in stock_products:
            info += f"{stock['warehouse']['city']} - {stock['stock'].split('.')[0]} —à—Ç.\n"

        info += f'–¶–µ–Ω–∞: {price}‚ÇΩ'

        kb_product = InlineKeyboardMarkup(row_width=1)
        new_button = InlineKeyboardButton(
            text='üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
            callback_data=f'add_product_to_cart{product_pk}'
        )
        kb_product.add(new_button)

    return kb_product, info, url_photo


# –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–æ–¥–Ω–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ pk –¥–∞–ª–µ–µ –ø–æ –º–∞—à–∏–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
async def get_confirm_add_product_to_cart(product_pk: str) -> InlineKeyboardMarkup:

    kb_confirm = InlineKeyboardMarkup(row_width=2)
    confirm_button = InlineKeyboardButton(
        text='–î–∞',
        callback_data=f'confirm_add_product_to_cart{product_pk}'
    )
    not_confirm_button = InlineKeyboardButton(
        text='–ù–µ—Ç',
        callback_data=f'not_confirm_add_product_to_cart{product_pk}'
    )
    kb_confirm.add(confirm_button).insert(not_confirm_button)

    return kb_confirm


# –ø–æ–ª—É—á–∏–º –∫–Ω–æ–ø–∫–∏ —Å–∫–ª–∞–¥–æ–≤, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –≥–¥–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
async def get_warehouses_kb(product_pk: str, quantity_msg: str) -> InlineKeyboardMarkup:
    quantity = float(quantity_msg)

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        kb_warehouses = InlineKeyboardMarkup(row_width=1)
        product = await get_product_by_pk(session, product_pk)
        stock_products = product.get('get_stock_product', [])

        for stock in stock_products:
            if quantity > float(stock['stock']):
                continue

            new_button = InlineKeyboardButton(
                text=stock['warehouse']['name'],
                callback_data=f"warehouse_pk{stock['warehouse']['pk']}"
            )
            kb_warehouses.add(new_button)

    return kb_warehouses


async def get_cart_info(id_messenger: int) -> dict:
    cart_info = {}
    params_get = {'id_messenger': id_messenger}

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.get(f'{config.ADDR_SERV}/api/v1/get_cart_info', params=params_get) as resp:
            if resp.ok:
                cart_info = await resp.json()

    return cart_info


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∫–ª—é—á–µ–º —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ,
# –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º(–Ω–∞–ø—Ä–∏–º–µ—Ä "–£–¥–∞–ª–∏—Ç—å")
async def get_cart(id_messenger: int) -> dict:
    cart_products = {'amount_cart': 0.0}

    cart_info = await get_cart_info(id_messenger)

    products_in_cart = cart_info.get('products', [])

    for product_row in products_in_cart:
        cart_products['amount_cart'] += float(product_row['amount'])
        product_info = f"<strong>{product_row['product']['name']}</strong>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product_row['quantity'].split('.')[0]}\n–°—É–º–º–∞: {product_row['amount']}‚ÇΩ"

        kb_cart = InlineKeyboardMarkup(row_width=2)

        info_button = InlineKeyboardButton(
            text='üì¶ –û —Ç–æ–≤–∞—Ä–µ',
            callback_data=f"show_product{product_row['product']['pk']}"
        )
        delete_button = InlineKeyboardButton(
            text='üöΩ –£–¥–∞–ª–∏—Ç—å',
            callback_data=f"delete_product_from_cart{product_row['product']['pk']}"
        )

        kb_cart.add(info_button).insert(delete_button)

        cart_products[product_info] = kb_cart

    return cart_products


# –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
# product_cart_new - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–∞—à–∏–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def add_product_to_cart(product_cart_new: dict) -> None:
    product_cart_new['product_pk'] = int(product_cart_new.get('product_pk', 0))
    product_cart_new['quantity'] = float(product_cart_new.get('quantity', 0.0))
    product_cart_new['warehouse_pk'] = int(product_cart_new.get('warehouse_pk', 0))
    product_cart_new['for_anonymous_user'] = 1

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.post(f'{config.ADDR_SERV}/api/v1/update_product_to_cart', json=product_cart_new):
            pass


# —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –∑–∞–∫–∞–∑–∞, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∏ –∫–æ—Ä–∑–∏–Ω–∞–º –∏ –∑–∞–∫–∞–∑–∞–º
async def delete_product_from_cart(product_cart_info: dict) -> None:
    product_cart_info['product_pk'] = int(product_cart_info.get('product_pk', 0))
    product_cart_info['for_anonymous_user'] = 1

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.post(f'{config.ADDR_SERV}/api/v1/delete_product_from_cart', json=product_cart_info):
            pass


# –°–æ–∑–¥–∞–µ—Ç –ó–∞–∫–∞–∑ –≤ –ë–î —Å–∞–π—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ó–∞–∫–∞–∑—É
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ—É –æ –∑–∞–∫–∞–∑–µ
# –ø—Ä–∏–º–µ—Ä order_info : {'first_name': '–ò–≤–∞–Ω', 'last_name': '–ò–≤–∞–Ω–æ–≤', 'phone': '79277777777', 'id_messenger': 827503364}
async def create_or_update_order(order_info: dict) -> dict:
    order_info['id'] = 0

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.post(f'{config.ADDR_SERV}/api/v1/create_update_order', json=order_info) as resp:
            if resp.ok:
                order_info = await resp.json()

    return order_info


# –ü–æ–ª—É—á—É –∑–∞–∫–∞–∑—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ id_messenger —Ñ—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–ú–∞–≥–∞–∑–∏–Ω–∞
async def get_orders_for_messenger(id_messenger: int, paid: int) -> list[dict]:
    orders = []

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        params_get = {'id_messenger': id_messenger, 'paid': paid}

        async with session.get(f'{config.ADDR_SERV}/api/v1/orders', params=params_get) as resp:
            if resp.ok:
                orders = await resp.json()

    return orders


# –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ InlineKeyboardMarkup
async def get_kb_order_list(id_messenger: int, paid: int) -> InlineKeyboardMarkup:
    kb_orders = InlineKeyboardMarkup(row_width=1)

    orders = await get_orders_for_messenger(id_messenger, paid)

    for order in orders:
        paid_text = '–æ–ø–ª–∞—á–µ–Ω' if paid else '–Ω–µ–æ–ø–ª–∞—á–µ–Ω'
        date_order = datetime.strptime(
            order['time_update'], '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%d.%m.%Y')
        text_order = f"–ó–∞–∫–∞–∑ ‚Ññ{order['id']} –æ—Ç {date_order} —Å—Ç–∞—Ç—É—Å: {paid_text}"
        order_pk = order.get('id', 0)

        order_button = InlineKeyboardButton(
            text=text_order,
            callback_data=f'show_order_pk{order_pk}'
        )
        kb_orders.add(order_button)

        if not paid:
            amount = order.get('amount', 0)
            payment_button = InlineKeyboardButton(
                text=f'üí≥–û–ø–ª–∞—Ç–∏—Ç—å {amount}‚ÇΩ',
                callback_data=f"payment_for_order{order_pk}:{amount}"
            )
            kb_orders.add(payment_button)        

    button_cancel = InlineKeyboardButton(
        text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'
    )
    kb_orders.add(button_cancel)

    return kb_orders


async def get_order_info(order_pk: str, paid: int) -> dict:
    order_info = {}
    params_get = {'order_pk': order_pk, 'paid': paid}

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.get(f'{config.ADDR_SERV}/api/v1/get_order_info', params=params_get) as resp:
            if resp.ok:
                order_info = await resp.json()
                date_order = datetime.strptime(order_info['time_update'], '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%d.%m.%Y')
                order_info['order_repr'] = f"<strong>–ó–∞–∫–∞–∑ ‚Ññ{order_info['id']} –æ—Ç {date_order}\n</strong>"

    return order_info


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∑–∞–∫–∞–∑–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ,
# –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º(–Ω–∞–ø—Ä–∏–º–µ—Ä "–£–¥–∞–ª–∏—Ç—å") –∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–æ–º –∑–∞–∫–∞–∑–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
async def get_kb_order_info(order_pk: str, paid: int) -> tuple[dict, dict]:
    order_products_kb = {}
    order_info = await get_order_info(order_pk, paid)
    products_in_order = order_info.get('products', [])

    for product_row in products_in_order:
        product_info = f"<strong>{product_row['product']['name']}</strong>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product_row['quantity'].split('.')[0]} –Ω–∞ —Å—É–º–º—É: {product_row['amount']}‚ÇΩ"

        kb_cart = InlineKeyboardMarkup(row_width=2)

        info_button = InlineKeyboardButton(
            text='üì¶ –û —Ç–æ–≤–∞—Ä–µ',
            callback_data=f"show_product{product_row['product']['pk']}"
        )
        kb_cart.add(info_button)

        if order_info['status']['repr'] == '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑':
            delete_button = InlineKeyboardButton(
                text='üöΩ –£–¥–∞–ª–∏—Ç—å',
                callback_data=f"delete_product_from_order{product_row['product']['pk']}:{order_pk}"
            )
            kb_cart.insert(delete_button)

        order_products_kb[product_info] = kb_cart

    # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, —Ç–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç–æ–≤–∞—Ä—É –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞
    if order_products_kb:
        amount = order_info.get('amount', 0)
        payment_button = InlineKeyboardButton(
            text=f'üí≥–û–ø–ª–∞—Ç–∏—Ç—å {amount}‚ÇΩ',
            callback_data=f"payment_for_order{order_pk}:{amount}"
        )
        order_products_kb[product_info].add(payment_button)

    return order_products_kb, order_info


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏
# difference_info - —Å–ª–æ–≤–∞—Ä—å –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:–†–∞–∑–Ω–∏—Ü–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ –≤—Å–µ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç
async def check_stock_in_order(order_pk: str) -> dict:
    difference_info = {}

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        params_get = {'order_pk': order_pk}

        async with session.get(f'{config.ADDR_SERV}/api/v1/check_stock_for_order', params=params_get) as resp:
            if resp.ok:
                difference_info = await resp.json()

    return difference_info


# –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∏–∑–Ω–∞–∫ –û–ø–ª–∞—á–µ–Ω –≤ –ë–î
async def set_order_payment(order_pk: str) -> None:
    order_info = {'paid': 1}

    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.patch(f'{config.ADDR_SERV}/api/v1/orders_update/{order_pk}', json=order_info):
            pass
